//---------------------------------------------------------------------------//
// 디바이스 및 스왑체인 생성 과정 				             //
// 1. CreateDevice()							     //
// 2. CreateGIFactory()							     //
// 3. CreateSwapChain()							     //
// 4. SetRenderTargetView()						     //
// 5. SetViewPort()                                                          //
//---------------------------------------------------------------------------//

//---작업절차 (3개의 인터페이스를 한꺼번에 생성할 때)------------------------//
//1. 초기화 작업                                                             //
//  1) ID3D11Device / ID3D11DeviceContext / IDXGISwapChain 선언 및 생성      //
//  2) ID3D11RenderTargetView 선언 및 생성                                   //
//  3) D3D11_VIEWPORT 설정                                                   //
//2. 반복 작업                                                               //
//  4) ID3D11RenderTargetView 객체에 컬러를 채운다. (BackBuffer를 지운다.)   //
//  5) IDXGISwapChain 객체를 사용하여 시연(출력)한다.                        //
//3. 소멸 작업                                                               //
//  6) 모든 생성된 객체들을 소멸 또는 삭제한다.                              //
//---------------------------------------------------------------------------//

//---작업절차 (3개의 인터페이스를 따로따로 생성할 때)------------------------//
//1. 초기화 작업                                                             //
//  1) ID3D11Device 및 ID3D11DeviceContext 인터페이스 객체 선언 및 생성      //
//  2) DXGI(IDXGIFactory) 인터페이스 객체 선언 및 생성                       //
//  3) DXGI를 이용해서 IDXGISwapChain 인터페이스 객체 선언 및 생성           //
//  4) ID311RenderTargetView 인터페이스 객체 선언 및 생성                    //
//  5) D3d11_VIEWPORT 설정                                                   //
//2. 반복 작업                                                               //
//  4) ID3D11RenderTargetView 객체에 컬러를 채운다. (BackBuffer를 지운다.)   //
//  5) IDXGISwapChain 객체를 사용하여 시연(출력)한다.                        //
//3. 소멸 작업                                                               //
//  6) 모든 생성된 객체들을 소멸 또는 삭제한다.                              //
//---------------------------------------------------------------------------//


I로 시작하는 객체는 인터페이스로 해당 기능을 사용하기 위한 유일한 통로가 된다.

IDXGIFactory           : DX의 코어 모드와 유저 모드 통신, 아답터 및 모니터 등 하드웨어 제어.
ID3D11Device           : 주로 리소스(버퍼 리소스, 텍스쳐 리소스)의 생성과 관련된 작업(1개의 쓰레드 사용)
ID3D11DeviceContext    : 생성된 리소스들을 사용하여 렌더링 처리 및 제어.
IDXGISwapChain         : 전면 버퍼 및 후면 버퍼들을 생성 및 제어.
ID3D11RenderTargetView : 생성된 후면버퍼들 중에서 렌더링(출력) 될 대상버퍼를 지정.
DXGI_SWAP_CHAIN_DESC   : 생성할 스왑체인 객체의 속성값 지정.
D3D11_VIEWPORT         : 윈도우 안에서 렌더링 될 영역을 지정.

ID3D11Device에서는 리소스의 생성만 담당하고, 렌더링 처리는 ID3D11DeviceContext로 한다.
ID3D11DeviceContext는 역할에 따라 Immediage Context와 Deferred Context로 나눠진다.
Immediage Context : 즉시 렌더링을 위한 DC
Deferred Context  : 지연 렌더링을 위한 DC (멀티 스레드를 이용할 때 사용)

각 리소스들을 사용하여 렌더 타겟 뷰로 지정된 버퍼에 렌더링하고,
후면 버퍼의 결과를 다시 전면 버퍼에 더블 버퍼링하면 윈도우 화면에 결과가 보이게 된다.


1. 디바이스를 생성
D3D11CreateDevice(
			nullptr,               //   디스플레이 시스템(어댑터) NULL이면 주디스플레이로 자동 선택됨.
			g_d3dDriverType,       // 1) 드라이버 타입 지정.
			NULL,                  //   특정 소프트웨어의 모듈을 사용하는 디바이스를 만들때 사용.
			uCreateDeviceFlags,    // 2) 디바이스 생성 플래그
			dxFeatureLevels,       //   선택될 수 있는 피처 레벨 배열
			uNumFeatureLevels,     //   피처 레벨 배열의 원소수
			D3D11_SDK_VERSION,     //   SDK버전 : 가지고 있는 버전으로 선택하면 된다.
			&g_pD3dDevice,         //   생성된 디바이스를 반환받을 주소
			&g_d3dFeatureLevel,    // 3) 선택된 피처레벨을 반환받을 주소.
			&g_pImmediateContext); //   생성된 DC를 반환받을 주소.

1) 드라이버 생성 타입
enum D3D_DRIVER_TYPE {         //디바이스 타입 속성값
   D3D_DRIVER_TYPE_UNKNOWN,    //드라이버 생성 타입을 알 수 없을 경우 사용
   D3D_DRIVER_TYPE_HARDWARE,   //HAL(Hardware Abstraction Layer)이며 어댑터가 하드웨어 가속을 지원시 사용
   D3D_DRIVER_TYPE_REFERENCE,  //참조타입으로 하드웨어 가속이 지원되지 않을 경우에 사용
   D3D_DRIVER_TYPE_NULL,	   //렌더링 기능이 없는 REF(Reference Rasterize)장치. 소프트웨어로 에뮬레이트하는 방식. 테스트 용도로만 사용가능
   D3D_DRIVER_TYPE_SOFTWARE,   //외부 소프트웨어 모듈의 기능을 사용시 지정
   D3D_DRIVER_TYPE_WARP,	   //고성능의 소프트웨어 REF장치.
};

그래픽카드가 DX11을 지원하면 D3D_DRIVER_TYPE_HARDWARE로 지정하고,
그렇지 않으면 D3D_DRIVER_TYPE_WARP나 D3D_DRIVER_TYPE_REFERENCE를 사용하면 된다.


D3D_DRIVER_TYPE_NULL      : 렌더링 없이 참조 디바이스를 얻기 위해서 사용되며 텍스처를 대상으로 하는 작업에 사용됨.

D3D_DRIVER_TYPE_WARP      : 고성능의 소프트웨어 드라이버 타입으로 DX11에 새롭게 도입된 것으로 Win7이후의 운영체제에서 지원된다.
(Windows Advanced Rasterization Platform)

D3D_DRIVER_TYPE_REFERENCE : GPU의 연산을 CPU가 담당하여 저속으로 처리하겠다는 것을 의미. 
                            그래픽카드가 DX11을 지원하지 않을 때 디버깅 용도로 사용.

D3D_DRIVER_TYPE_UNKNOWN   : D3D10에서는 디바이스 생성시 사용할 어댑터를 지정하였지만 디바이스의 드라이버 타입이 해당 어댑터와 일치하지 않을 경우 디바이스 생성에 문제가 발생했었다.
                            그래서 D3D11에서는 어댑터를 사용할 경우 D3D_DRIVER_TYPE_UNKNOWN으로 지정하도록 제한하였다.
							그러면 디바이스 객체를 생성할 수 있는 최상의 드라이브 타입이 자동적으로 선택된다.
							하지만 어댑터를 사용하지 않는다면 D3D_DRIVER_TYPE_UNKNOWN을 사용할 수 없으므로 다른 드라이버 타입을 선택해야 한다.


2) 디바이스 생성 플래그 : 
D3D11_CREATE_DEVICE_FLAG 값들이 사용된다. 비트 논리합으로 여러개를 지정할 수 있다.
디바이스의 런타입 레이어를 지정하는 인자값으로 코어 레이어와 디버그 레이어가 제공된다.
코어 레이어는 기본 레이어로써 API와 장치 드라이버의 오버헤드를 최소화하며 성능이 중시되는 디바이스를 생성한다.
반면에 디버그 레이어는 쉐이더의 연결 상태와 리소스의 바인딩 상태 확인 및 매개 변수의 일관성 검증 및 오류를 알려주는 개발자 디버그용 디바이스를 생성해준다.

enum D3D11_CREATE_DEVICE_FLAG   {	
   D3D11_CREATE_DEVICE_SINGLETHREADED,                              // 디바이스를 싱글 쓰레드에서만 호출한 경우 사용됨.
   D3D11_CREATE_DEVICE_DEBUG,										// 디버그 레이어를 지원하는 디바이스를 생성한다.
   D3D11_CREATE_DEVICE_SWITCH_TO_REF,								// DX11에서는 지원되지 않는다. 
   D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS,	// 응용 프로그램을 방해할 수도 있는 다른 쓰레드가 생성되지 않도록 디바이스를 생성한다. 
   D3D11_CREATE_DEVICE_BGRA_SUPPORT,								// D3D와 D2D가 같이 기능하도록 디바이스를 생성한다.
}


3) 피처레벨 
선택한 레벨에 따라 지원하는 쉐이더 버전이 달라진다. 
enum D3D_FEATURE_LEVEL {    //DX3D 특성레벨 속성값
   D3D_FEATURE_LEVEL_9_1,   //쉐이더 2.0 지원
   D3D_FEATURE_LEVEL_9_2,	//쉐이더 2.0 지원
   D3D_FEATURE_LEVEL_9_3,	//쉐이더 3.0 지원
   D3D_FEATURE_LEVEL_10_0,	//쉐이더 4.0 지원
   D3D_FEATURE_LEVEL_10_1,	//쉐이더 4.0 지원
   D3D_FEATURE_LEVEL_11_0,	//쉐이더 5.0 지원
};


2. IDXGIFactory 객체 생성

스왑체인 객체를 생성하기 위해 꼭 필요하다.

HRESULT CreateDXGIFactory(   
  REFIID riid       // 매개 변수에 의해 참조되는 IDXGIFactory 개체의 전역 고유 식별자 (GUID)임. 
  void **ppFactory  // 생성된 IDXGIFactory객체를 반환받을 주소.
); 

GUID : 전역 고유 식별자. 
__uuidof(클래스명 or 인터페이스명) : GUID를 만들어서 반환함.

//얘로 뭘 할 수 있는지는 다음거에서 정리.

3. 스왑 체인 객체 생성
// 스왑체인을 생성하려면 반드시 윈도우가 생성되어 있어야 한다.
// 이 윈도우의 클라이언트 크기가 백버퍼의 크기로 지정된다.

//스왑체인은 전면버퍼와 후면버퍼 한 쌍을 관리하는 객체이다.

스왑체인을 생성하는 함수 (DXGIFactory의 멤버함수로 존재)
CreateSwapChain(
   g_pD3dDevice, // 생성되어 있는 디바이스 주소
   &sd, 		 // 스왑체인 속성값이 저장되어 있는 구조체
   &g_pSwapChain // 생성된 스왑체인을 반환받을 주소. 
);

스왑체인 객체는 DXGI_SWAP_CHAIN_DESC로 초기화한다. 
대부분 기본값으로 세팅하면 되지만 반드시 지정되어야 하는 변수도 존재한다.
CreateSwapChain(HWND hWnd, UINT iWidth, UINT iHeight)에서 DXGIFactory 인터페이스로부터 생성함

struct DXGI_SWAP_CHAIN_DESC
{
    DXGI_MODE_DESC BufferDesc;     // 1) 백 버퍼 모드를 나타내는 DXGI_MODE_DESC 구조체
    DXGI_SAMPLE_DESC SampleDesc;   // 2) 멀티 샘플링 매개 변수를 나타내는 DXGI_SAMPLE_DESC 구조체
    DXGI_USAGE BufferUsage;        // 3) 버퍼 용도 및 CPU 액세스 옵션을 나타내는 DXGI_USAGE 열거형 멤버. 
	                           //    버퍼는 쉐이더를 입력하거나 렌더 타겟을 출력하는 용도로 사용할 수 있다. 
    UINT BufferCount;	           // 4) 스왑 체인 버퍼 개수 (최소 1개 이상. 즉 제로 메모리로 초기화하면 1이상으로 꼭 설정해줘야함.)
    HWND OutputWindow;	           // 5) 출력할 윈도우의 HWND 핸들. NULL이면 안됨.
    BOOL Windowed;		   // 6) true = 창모드, false = 풀스크린 모드
    DXGI_SWAP_EFFECT SwapEffect;   // 7) 플릿핑 이후 렌더 타겟 버퍼의 내용을 어떻게 처리할지 지정하기 위한 DXGI_SWAP_EFFECT 열거형 변수
    UINT Flags;			   // 8) 스왑체인 동작 옵션을 나타내는 DXGI_SWAP_CHAIN_FLAG 열거형 변수.
};

1) 버퍼 모드
struct DXGI_MODE_DESC
{
    UINT Width;                                 // 해상도 넓이 
    UINT Height;				// 해상도 높이 (0으로 설정하면 초기 윈도우 크기로 생성되나?)
    DXGI_FORMAT Format;				// 백버퍼 출력 픽셀 포맷 (필수)
    DXGI_RATIONAL RefreshRate;			// 주사율 (분자/분모) 일반적으로 (60/1)을 사용하지만 0을 써도 됨. 
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;	// 주사선 렌더링 모드 형식
    DXGI_MODE_SCALING Scaling;			// 크기 조정 모드
};			

DXGI_FORMAT 열거형 변수의 의미.
_U : 부호화 되어있지 않은 상수
_S : 부호화 되어 있는 상수
UNORM : 정규화되었다.
_TYPELESS : 자료형이 지정되지 않았음. 실행시에 적합한 포맷으로 지정해서 사용됨.
_SRGB : 표준 RGB (MS사와 HP사가 만든 색상 체계 표준안)

2) 멀티 샘플링 매개 변수 : 
멀티 샘플링이란 1개 이상의 픽셀들을 조합 및 연산을 통하여 새로운 픽셀 값을 계산하는 것.
해당 픽셀 값을 주위의 값들에 영향을 받아 주의 픽셀과 유사한 색상으로 변하는 기능이 있음.
안티 앨리어싱도 이에 포함됨

DXGI_SAMPLE_DESC {
    UINT Count;    // 픽셀 단위의 멀티 샘플링의 수. 이 값이 1이면 멀티 샘플링을 하지 않겠다는 뜻. 0으로 초기화했으면 1로 설정해줘야 함.
    UINT Quality;  // 이미지 품질 수준이 반환됨. 0~CheckMultisampleQualityLevels 함수의 반환값 -1까지.
};

3) 버퍼 용도 
// 화면에 뿌릴 용도로 버퍼를 생성하려면 (스왑체인의 버퍼로 사용하려면?) 
// DXGI_USAGE_RENDER_TARGET_OUTPUT 선택해야 한다. 

DXGI_USAGE_BACK_BUFFER           // 표면 또는 리소스를 백 버퍼로 사용. 
DXGI_USAGE_DISCARD_ON_PRESENT    // 이 플래그는 D3D내부 사용 목적으로만 사용한다. 
DXGI_USAGE_READ_ONLY             // 표면 또는 리소스를 렌더링시에만 사용한다. 
DXGI_USAGE_RENDER_TARGET_OUTPUT  // 표면 또는 리소스를 출력 렌더 대상으로 사용한다. 
DXGI_USAGE_SHADER_INPUT          // 표면 또는 리소스를 쉐이더의 입력으로 사용한다.  
DXGI_USAGE_SHARED                // 표면 또는 리소스를 공유한다.

4) 생성할 버퍼 개수 
//최소 1개 이상.

5) 출력할 윈도우 핸들
//필수 입력

6) 창모드/전체화면 전환
true : 창모드, false : 전체화면

7) 플릿핑 이후 바꾼 버퍼를 어떻게 처리할지
//삭제가 기본값인데 항상 삭제한다기보다는 여건이 될때 알아서 삭제한다.
enum DXGI_SWAP_EFFECT {	
    DXGI_SWAP_EFFECT_DISCARD,      // Present를 호출하면 백버퍼의 내용을 삭제한다.
	DXGI_SWAP_EFFECT_SEQUENTIAL,   // Present를 호출하면 백버퍼의 내용을 보존한다. (멀티 샘플링과 함께 사용 불가)
};

8) 스왑체인의 동작을 결정
enum DXGI_SWAP_CHAIN_FLAG {
    DXGI_SWAP_CHAIN_FLAG_NONPREROTATED,     
	  // 이미지 자동 회전 비활성화. 전체화면 모드에서만 유효
	DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH,	
	  // IDXGISwapChain::ResizeTarget을 호출하여 모드를 전환할 수 있도록 설정. 
	  // 창모드에서 전체화면으로 전환하면 윈도우 크기에 맞춰 화면 해상도가 변경된다.
	DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE,	
	  // GDI를 사용하여 스왑체인 또는 표면에 렌더링할 수 있게 된다.
	  // GetDC를 사용하여 API함수를 사용할 수 있다?
};

9) 스왑체인 객체의 메소드
  GetBuffer               //백 버퍼를 얻는다.  
  GetContainingOutput     //출력을 얻는다.  
  GetDesc                 //스왑체인 속성을 얻는다.  
  GetFrameStatistics      //렌더링 통계를 얻는다. 
  GetFullscreenState      //디스플레이 모드를 얻는다. 
  GetLastPresentCount     //마지막 프레임에서 Present를 호출 횟수를 얻는다. 
  Present                 //프레임 버퍼를 출력에 표시한다.  
  ResizeBuffers           //모든 백 버퍼의 크기와 형식을 변경한다.  
  esizeTarget             //출력 특성을 변경한다.  


4. 렌더 타켓 뷰 생성 및 세팅
//렌더링 될 백버퍼의 메모리로 스왑체인의 백 버퍼를 연결한다.

겟버퍼로 받아서
GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBackBuffer);
//스왑체인의 각 백버퍼들은 각각 D3D11Texture2D객체로 표현된다.
//스왑체인의 각 버퍼 및 텍스처들의 메모리 영역을 서피스(surface)라고 하는데, 크기를 갖고 있는 이미지라고 이해하면 된다.

렌더 타겟을 생성하는 리소스로 넘겨준다.
CreateRenderTargetView(
   pBackBuffer,         // 렌더 타겟에 제공하는 리소스에 대한 포인터
   nullptr, 			// 깊이 및 스텐실 뷰의 정보에 대한 포인터
   &g_pRenderTagetView	// 생성된 렌더타겟뷰를 반환받을 주소.
);

만들어둔 DC에 렌더타켓뷰를 세팅한다.
g_pImmediateContext->OMSetRenderTargets(
   1,                     // 바인딩 렌더 타겟의 개수 
   &g_pRenderTagetView,   // 렌더타켓 객체의 배열 주소
   nullptr				  // 스텐실 뷰 객체 주소
);

5. 뷰포트 세팅
//스크린의 어떤 위치에 작업한 내용을 표현할 것인지 구역을 설정하는 것.




6. 기타
더블 버퍼링 : 1) 복사하는 방식 : 블릿팅(Bliting), 2) 교체하는 방식 : 플립핑(Page Flipping)
//DX는 기본적으로 플립핑 방식을 사용한다.


함수 앞에 붙는 접두사 (렌더링 파이프 라인의 어떤 영역에서 작동하는지를 나타낸다.)
IA = Input-Assembler Stage 
VS = Vertex-Shader Stage 
HS = Hull Shader Stage 
DS = Domain ShaderStage 
TS = Tessellation Stage 
GS = Geometry-Shader Stage 
SO = Stream-Output Stage 
RS = Rasterizer Stage 
PS = Pixel-Shader Stage 
OM = Output-Merger Stage 
CS = Compute Stage
