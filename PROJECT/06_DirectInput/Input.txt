
//1 : DirectInput 개체의 생성  
//2 : DirectInput 키보드 장치의 생성 / DirectInput 마우스 장치의 생성
//3 : 키보드 및 마우스의 데이터 형식의 설정  
//4 : 키보드 및 마우스의 동작 설정  
//5 : 키보드의 액세스 권한의 취득  
//6 : 키보드 및 마우스로부터의 데이터의 취득  
//7 : DirectInput 시스템의 종료

1. DirectInput 개체의 생성  

HRESULT DirectInput8Create(
   HINSTANCE hinst, 	// DXinput객체를 생성하려는 응용프로그램 또는 DLL의 인스턴스 핸들
   DWORD dwVersion, 	// DXinput객체의 버전 번호. 보통 DIRECTINPUT_VERSION을 넣는다.
   REFIID riidltf, 		// DXinput의 RFID. IID_IDirectInput8를 사용해서 넣는다.
   LPVOID *ppvOut, 		// 생성된 객체를 반환받을 주소
   LPUNKNOWN punkOuter  // IUnknown 인터페이스의 주소. 보통 NULL을 넣는다.
);

2. DirectInput 키보드와 마우스 장치의 생성

생성된 DXInput객체를 m_pDxInput에 저장했다면 m_pDxInput->CreateDevice()를 호출해서 입력장치를 생성한다.

HRESULT CreateDevice(
  REFGUID rguid,                              // 어떤 장치를 생성할지에 대한 GUID 참조값. 키보드=GUID_SysKeyboard,마우스=GUID_SysMouse.     
  LPDIRECTINPUTDEVICE *lplpDirectInputDevice, // 생성된 객체를 반환받을 주소
  LPUNKNOWN pUnkOuter                         // IUnknown 인터페이스의 주소. 보통 NULL을 넣는다.
); 

GUID를 사용하려면 DXGUID.LIB를 링크해야한다.

3. 키보드 및 마우스의 데이터 형식의 설정 

생성된 키보드 객체를 m_pDxKeypad에 저장했다면 m_pDxKeypad->SetDataFormat()를 호출해서 데이터 형식을 설정한다.

인자는 DIDATAFORMAT으로 키보드(c_dfDIKeyboard), 마우스1(c_dfDIMouse), 마우스2(c_dfDIMouse2), 조이스틱1(c_dfDIJoystick), 조이스틱2(c_dfDIJoystick2)로 나눠져있다.
기본적으로 키보드와 마우스1로 세팅하면 된다.

4. 키보드 및 마우스의 동작 설정 

m_pDxKeypad->SetCooperativeLevel()로 생성한 장치의 인스턴스가 다른 장치나 시스템과 어떻게 데이터를 교환할지를 결정한다.

SetCooperativeLevel(
HWND,    //윈도우 핸들값
DWORD	 //설정한 플래그
);

설정할 수 있는 플래그들
1) DISCL_BACKGROUND    할당된 윈도우가 활성화 상태 아닌 경우에도 입력장치의 사용이 가능함. 2)와 함께 사용 불가.
2) DISCL_FOREGROUND    할당된 윈도우가 활성화 상태일때만 입력장치의 사용이 가능함. 할당된 윈도우가 비활성화 상태일때 장치는 자동적으로 릴리즈되며 권한을 다시 받아올 필요가 있다. 1)과 함꼐 사용 불가.
3) DISCL_EXCLUSIVE     배타적 액세스 권한. 비활성화 상태에서도 다른 응용프로그램에게 장치의 사용권을 뺏기지 않는다. 4)와 함께 사용 불가.
4) DISCL_NONEXCLUSIVE  비배타적 액세스 권한. 다른 응용프로그램이 장치의 사용권을 가져갈 수 있다. 3)과 함께 사용 불가.
5) DISCL_NOWINKEY      Windows키를 무효로 한다. 

//뭔가 자유롭게 조합할 수 있는게 아닌 것 같은데 잘 모르겠음.

5. 키보드 및 마우스의 액세스 권한 취득  

6. 키보드 및 마우스로부터 데이터 취득  
  작동은 하는데 좀 이상함. 다시 만들 필요 있음.